<?php

/**
 * Implements hook_views_api().
 */
function drag_drop_operations_views_api() {

  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'drag_drop_operations') . '/views',
  );

}

function drag_drop_operations_form($form, &$form_state, $view, $display, $entity, $op, $rows = 1, $cols = 1, $allowed_values = array(), $element_type = 'select', $op_label = 'Submit', $view_mode = 'full') {

  $drop = drupal_get_library('system', 'ui.droppable');

  $form = array();
  $form['#tree'] = TRUE;
  $form['#attached'] = array(
    'library' => $drop['dependencies'],
    'js' => $drop['js'],
    'css' => $drop['css'],
  );
  $form['#attached']['js'][] = drupal_get_path('module', 'drag_drop_operations') . '/js/drag_drop_operations.js';
  $form['#attached']['css'][] = drupal_get_path('module', 'drag_drop_operations') . '/css/drag_drop_operations.css';
  $form['view_name'] = array(
    '#type' => 'value',
    '#value' => $view,
  );
  $form['view_display'] = array(
    '#type' => 'value',
    '#value' => $display,
  );
  $form['entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );
  $form['operation'] = array(
    '#type' => 'value',
    '#value' => $op,
  );
  $form['container'] = array(
    '#type' => 'container',
    '#id' => 'ddo-' . $view . '-' . $display . '-container',
  );
  $form['container']['items'] = array();
  $counter = 1;
  $setted = 0;
  $total = $rows * $cols;
  for ($i = 1; $i <= $total; $i++) {
    if (!empty($_SESSION['ddo_forms:' . $view . ':' . $display]['form_state']['values']['container']['items']['item_' . $i])) {
      $setted++;
      $default = $_SESSION['ddo_forms:' . $view . ':' . $display]['form_state']['values']['container']['items']['item_' . $i];
    }
    else {
      $default = '';
    }    
    $form['container']['items']['item_' . $i] = array(
      '#type' => $element_type,
      '#title' => t('Element !number', array('!number' => $i)),
      '#options' => $allowed_values,
      '#default_value' => $default,
      '#attributes' => array(
        'class' => array(
          'ddo-droppable',
        ),
      ),
    );
    if ($default) {
      $base = explode(':', $default);
      $ent_ent = entity_load($base[0], array($base[1]));
      $form['container']['items']['val_' . $i] = array(
        '#type' => 'markup',
        '#markup' => '<div class="ddo-droppable-box">' .
            '<div class="ddo-draggable-set">' .
              '<a href="#" class="ddo-remove-item">' . t('Remove') . '</a>' .
              render(entity_view($base[0], $ent_ent, $view_mode)) .
            '</div>' .
          '</div>'
      );
    }
    else {
      $form['container']['items']['val_' . $i] = array(
        '#type' => 'markup',
        '#markup' => '<div class="ddo-droppable-box"></div>',
      );
    }
    if ($counter == $cols) {
      $counter = 1;
      $form['container']['items']['val_' . $i]['#suffix'] = '<div class="ddo-cleaner"></div>';
    }
    else {
      $counter++;
    }
  }
  $form['container']['draft'] = array(
    '#type' => 'submit',
    '#value' => t('Draft'),
    '#submit' => array('drag_drop_operations_form_save_draft'),
    '#ajax' => array(
      'callback' => 'drag_drop_operations_form_save_draft_js',
      'wrapper' => 'ddo-' . $view . '-' . $display . '-container',
    ),
    '#attributes' => array(
      'class' => array('element-hidden'),
    ),
    '#id' => 'ddo-edit-container-draft',
  );
  if ($setted == $total) { // TO-DO: Full as an option!
    $form['container']['submit'] = array(
      '#type' => 'submit',
      '#value' => t($op_label),
      '#submit' => array(
        'drag_drop_operations_form_save_draft',
        'drag_drop_operations_form_submit',
      ),
    );
  }
  return $form;

}

function drag_drop_operations_form_save_draft_js($form, &$form_state) {

  $_SESSION['ddo_forms:' . $form_state['values']['view_name'] . ':' . $form_state['values']['view_display']] = array(
    'form' => $form,
    'form_state' => $form_state,
  );
  return $form['container'];

}

function drag_drop_operations_form_save_draft($form, &$form_state) {

  drag_drop_operations_form_save_draft_js($form, $form_state);
  $form_state['rebuild'] = TRUE;

}

function drag_drop_operations_form_submit($form, &$form_state) {

  $items = $form_state['values']['container']['items'];
  $rows = array();
  //$entities = entity_get_info();
  $entity = $form_state['values']['entity'];
  //$entity = $entities[$entity]['controller class'];
  $operation = views_bulk_operations_get_operation( // TO-DO: Remove dependency!
    $form_state['values']['operation'],
    $entity,
    array()
  );
  $rows = array();
  $current = 1;
  $total = 0;
  foreach ($items as $row_index => $entity_id) {
    $total++;
  }
  foreach ($items as $entity_id) {
    $base = explode(':', $entity_id);
    $rows[] = array(
      'entity_id' => $base[1],
      'views_row' => array(),
      'position' => array(
        'current' => $current++,
        'total' => $total,
      ),
    );
  }
  drag_drop_operations_direct_process(
    $operation,
    $rows,
    array(
      'revision' => FALSE,
      'entity_load_capacity' => 10,
    )
  );

}

function drag_drop_operations_direct_process($operation, $rows, $options) {

  @set_time_limit(0);

  $entity_type = $operation->entityType;
  $entity_ids = array();
  foreach ($rows as $row_index => $row) {
    $entity_ids[] = $row['entity_id'];
  }
  $entities = entity_load($entity_type, $entity_ids);

  if (empty($entities)) {
    return;
  }

  // Pass the selected rows to the operation if needed.
  $operation_context = array();
  if ($operation->needsRows()) {
    $operation_context['rows'] = array();
    foreach ($rows as $row_index => $row) {
      $operation_context['rows'][$row_index] = $row['views_row'];
    }
  }
  $entities_noindex = array();
  foreach($rows as $row_item) {
    if (isset($entities[$row_item['entity_id']])) {
      $entities_noindex[]= $entities[$row_item['entity_id']];
    }
  }
  $operation->execute($entities_noindex, $operation_context);

}
