<?php

/**
 * Implements hook_menu().
 */
function drag_drop_operations_menu() {
  $items = array();
  $items['ddo-add-link/%/%/%/%'] = array(
    'title' => 'Drag drop operations add link callback',
    'page callback' => 'drag_drop_operations_add_link_callback',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('access content'),
    'delivery callback' => 'ajax_deliver',
  );
  return $items;
}

/**
 * Implements hook_views_api().
 */
function drag_drop_operations_views_api() {

  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'drag_drop_operations') . '/views',
  );

}

/**
 * Implements hook_ds_fields_info().
 */
function drag_drop_operations_ds_fields_info($entity_type) {

  $fields = array();

  $sql = db_select('views_display', 'vd')
    ->fields('vd', array('vid', 'id', 'display_title'))
    ->fields('vv', array('name', 'human_name'))
    ->condition(
      'vd.display_options',
      '%s:12:"style_plugin";s:44:"views_plugin_style_drag_drop_operations_drop"%',
      'LIKE'
    )
    ->condition('vv.base_table', $entity_type);
  $sql->leftJoin('views_view', 'vv', 'vd.vid = vv.vid');
  $sql = $sql->execute();

  $entity_key = NULL;

  while ($row = $sql->fetchAssoc()) {
    if (!$entity_key) {
      $entity_info = entity_get_info($entity_type);
      $entity_key = $entity_info['entity keys']['id'];
    }
    $fields[$entity_type]['ddo__' . $row['name'] . '__' . $row['id']] = array(
      'title' => t(
        'Drag and drop link: @view (@display)',
        array(
          '@view' => $row['human_name'],
          '@display' => $row['display_title'],
        )
      ),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'drag_drop_operations_add_link',
      'properties' => array(
        'settings' => array(
          'text' => array(
            'type' => 'textfield',
          ),
        ),
        'default' => array(
          'text' => 'Add',
        ),
        'ddo' => array(
          'view' => $row['name'],
          'display' => $row['id'],
          'subpath' => $row['name'] . '/' . $row['id'],
          'entity_key' => $entity_key,
        ),
      ),
    );
  }

  if (isset($fields[$entity_type])) {
    return array($entity_type => $fields[$entity_type]);
  }

  return;

}

function drag_drop_operations_add_link_callback($entity_type, $entity_id, $view, $display) {
  $commands = array();
  $token = 'ddo-add-link/' . $entity_type . '/' . $entity_id . '/' . $view . '/' . $display . '/nojs';
  if (isset($_GET['token']) && drupal_valid_token($_GET['token'], $token)) {
    $commands[] = array(
      'command' => 'ddo_link_add',
      'entity' => $entity_type,
      'id' => $entity_id,
      'view' => $view,
      'display' => $display,
    );
  }
  else {
    $commands[] = ajax_command_alert(t('Invalid token'));
  }
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

function drag_drop_operations_add_link($field) {

  $path = 'ddo-add-link/' . $field['entity_type'] . '/';
  $path .= $field['entity']->{$field['properties']['ddo']['entity_key']} . '/';
  $path .= $field['properties']['ddo']['subpath'] . '/nojs';
  drupal_add_js(drupal_get_path('module', 'drag_drop_operations') . '/js/drag_drop_operations_link.js');
  return l(
    t('Add'),
    $path,
    array(
      'query' => array(
        'token' => drupal_get_token($path),
      ),
      'attributes' => array(
        'class' => array(
          'ddo-add-link',
          'use-ajax',
        ),
      ),
    )
  );

}

function drag_drop_operations_form($form, &$form_state, $options) {

  $view = $options['view'];
  $display = $options['display'];
  $entity = $options['entity'];
  $op = $options['op'];
  $rows = isset($options['rows']) ? $options['rows'] : 1;
  $cols = isset($options['cols']) ? $options['cols'] : 1;
  $required_size = isset($options['required_size']) ? $options['required_size'] : 0;
  $required_size_form = $options['required_size_form'];
  $allowed_values = isset($options['allowed_values']) ? $options['allowed_values'] : array();
  $element_type = isset($options['element_type']) ? $options['element_type'] : 'select';
  $op_label = isset($options['op_label']) ? $options['op_label'] : 'Submit';
  $view_mode = isset($options['view_mode']) ? $options['view_mode'] : 'full';
  $full = isset($options['full']) ? $options['full'] : 0;
  $flush = isset($options['flush']) ? $options['flush'] : 1;
  $redraggable = isset($options['redraggable']) ? $options['redraggable'] : 0;
  $sortable = isset($options['sortable']) ? $options['sortable'] : 0;

  $rows = array_filter(explode(',', $rows), 'trim');
  $cols = array_filter(explode(',', $cols), 'trim');

  $drop = drupal_get_library('system', 'ui.droppable');
  $libs = $drop;
  if ($sortable) {
    $sort = drupal_get_library('system', 'ui.sortable');
    $libs['js'] += $sort['js'];
    $libs['css'] += $sort['css'];
    $libs['dependencies'] += $sort['dependencies'];
  }

  $form = array();
  $form['#tree'] = TRUE;
  $form['#attached'] = array(
    'library' => $libs['dependencies'],
    'js' => $libs['js'],
    'css' => $libs['css'],
  );
  $form['#attached']['js'][] = drupal_get_path('module', 'drag_drop_operations') . '/js/drag_drop_operations.js';
  $form['#attached']['css'][] = drupal_get_path('module', 'drag_drop_operations') . '/css/drag_drop_operations.css';
  $form['view_name'] = array(
    '#type' => 'value',
    '#value' => $view,
  );
  $form['view_display'] = array(
    '#type' => 'value',
    '#value' => $display,
  );
  $form['requires_full'] = array(
    '#type' => 'value',
    '#value' => $full,
  );
  $form['entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );
  $form['operation'] = array(
    '#type' => 'value',
    '#value' => $op,
  );
  $form['container'] = array(
    '#type' => 'container',
    '#id' => 'ddo-' . $view . '-' . $display . '-container',
  );
  if ((count($rows) > 1) && (count($cols) > 1)) {
    $array_rows = $rows;
    $array_cols = $cols;
    $first_step = FALSE;
    if (!empty($_SESSION['ddo_forms:' . $view . ':' . $display]['rows'])) {
      $rows = $_SESSION['ddo_forms:' . $view . ':' . $display]['rows'];
      $cols = $_SESSION['ddo_forms:' . $view . ':' . $display]['cols'];
    }
    elseif ($required_size) {
      $first_step = TRUE;
      $rows = 0;
      $cols = 0;
    }
    else {
      $rows = $rows[0];
      $cols = $cols[0];
    }
    $size_options = array();
    if ($first_step) {
      $size_options['0_0'] = t('- Select an option -');
    }
    $first_set = FALSE;
    foreach ($array_rows as $index => $row) {
      $size_options[$row . '_' . $array_cols[$index]] = $row . 'x' . $array_cols[$index];
      if (!$first_set) {
        $first_set = $size_options[$row . '_' . $array_cols[$index]];
      }
    }
    $form['container']['box_size'] = array(
      '#type' => $required_size_form,
      '#options' => $size_options,
      '#default_value' => isset($size_options[$rows . '_' . $cols]) ? ($rows . '_' . $cols) : $first_set,
      '#options' => $size_options,
      '#title' => t('Size'),
      '#ajax' => array(
        'callback' => 'drag_drop_operations_form_save_draft_js',
        'wrapper' => 'ddo-' . $view . '-' . $display . '-container',
        'event' => 'change',
      ),
    );
  }
  else {
    $rows = $rows[0];
    $cols = $cols[0];
  }
  $total = $rows * $cols;
  $form['container']['#attributes'] = array(
    'class' => array(
      'ddo-grid-' . $rows . 'x' . $cols,
      'ddo-items-' . $total,
    ),
  );
  if ($sortable) {
    $form['container']['#attributes']['class'][] = 'ddo-sort-box';
  }
  $counter = 1;
  $setted = 0;
  $form['flush_submit'] = array(
    '#type' => 'value',
    '#value' => $flush,
  );
  $form['container']['items'] = array();
  if (!empty($_SESSION['ddo_forms:' . $view . ':' . $display]['id'])) {
    $form['#build_id'] = $_SESSION['ddo_forms:' . $view . ':' . $display]['id'];
  }
  else {
    $form_build_id = 'form-' . drupal_hash_base64(uniqid(mt_rand(), TRUE) . mt_rand());
    $_SESSION['ddo_forms:' . $view . ':' . $display]['id'] = $form_build_id;
    $form['#build_id'] = $form_build_id;
  }
  for ($i = 1; $i <= $total; $i++) {
    if (!empty($_SESSION['ddo_forms:' . $view . ':' . $display]['form_state']['values']['container']['items']['item_' . $i])) {
      $setted++;
      $default = $_SESSION['ddo_forms:' . $view . ':' . $display]['form_state']['values']['container']['items']['item_' . $i];
    }
    else {
      $default = '';
    }
    $form['container']['items']['item_' . $i] = array(
      '#type' => $element_type,
      '#title' => t('Element !number', array('!number' => $i)),
      '#options' => $allowed_values,
      '#default_value' => $default,
      '#attributes' => array(
        'class' => array(
          'ddo-droppable',
        ),
      ),
    );
    if ($default) {
      $base = explode(':', $default);
      $ent_ent = entity_load($base[0], array($base[1]));
      $form['container']['items']['val_' . $i] = array(
        '#type' => 'markup',
        '#markup' =>
          '<div class="ddo-droppable-box ddo-droppable-box--' . $i . ($sortable ? ' ddo-element-sortable' : '') . '">
            <div class="ddo-draggable-set' . ($redraggable ? ' ddo-draggable ddo-draggable--' . $base[0] . '--' . $base[1] : '') . '">
              <a href="#" class="ddo-remove-item">' . t('Remove') . '</a>
              ' . render(entity_view($base[0], $ent_ent, $view_mode)) . '
            </div>
          </div>',
      );
    }
    else {
      $form['container']['items']['val_' . $i] = array(
        '#type' => 'markup',
        '#markup' => '<div class="ddo-droppable-box ddo-droppable-box--' . $i . ($sortable ? ' ddo-element-sortable' : '') . '"></div>',
      );
    }
    if ($counter == $cols) {
      $counter = 1;
      $form['container']['items']['val_' . $i]['#suffix'] = '<div class="ddo-cleaner"></div>';
    }
    else {
      $counter++;
    }
  }
  $form['container']['draft'] = array(
    '#type' => 'submit',
    '#value' => t('Draft'),
    '#submit' => array('drag_drop_operations_form_save_draft'),
    '#ajax' => array(
      'callback' => 'drag_drop_operations_form_save_draft_js',
      'wrapper' => 'ddo-' . $view . '-' . $display . '-container',
      'event' => 'mousedown',
    ),
    '#id' => 'ddo-edit-container-draft',
  );

  if ($full) {
    if ($setted == $total) {
      $show_action = TRUE;
    }
    else {
      $show_action = FALSE;
    }
  }
  else {
    $show_action = TRUE;
  }
  if ($total == 0) {
    $show_action = FALSE;
  }

  if ($show_action) {
    $t = get_t();
    $form['container']['submit'] = array(
      '#type' => 'submit',
      '#value' => $t($op_label),
      '#submit' => array(
        'drag_drop_operations_form_save_draft',
        'drag_drop_operations_form_submit_all',
      ),
      '#validate' => array(
        'drag_drop_operations_form_validate_all',
      ),
    );
  }

  return $form;

}

function drag_drop_operations_form_save_draft_js($form, &$form_state) {

  $index = 'ddo_forms:' . $form_state['values']['view_name'] . ':' . $form_state['values']['view_display'];
  $_SESSION[$index] = array(
    'id' => $form['#build_id'],
    'form' => $form,
    'form_state' => $form_state,
  );
  if (!empty($form_state['values']['container']['box_size'])) {
    $arr_size = explode('_', $form_state['values']['container']['box_size']);
    $_SESSION[$index]['rows'] = $arr_size[0];
    $_SESSION[$index]['cols'] = $arr_size[1];
    $form = drupal_rebuild_form($form['#form_id'], $form_state, $form);
  }
  else {
    $_SESSION[$index]['rows'] = 0;
    $_SESSION[$index]['cols'] = 0;
  }
  return $form['container'];

}

function drag_drop_operations_form_save_draft($form, &$form_state) {

  drag_drop_operations_form_save_draft_js($form, $form_state);
  $form_state['rebuild'] = TRUE;

}

function drag_drop_operations_form_validate_all($form, &$form_state) {

  if ($form_state['values']['requires_full']) {
    foreach ($form_state['values']['container']['items'] as $d => $item) {
      if (!$item) {
        form_set_error('container][items][' . $d, t('Item is required'));
      }
    }
  }

}

function drag_drop_operations_form_submit_all($form, &$form_state) {

  $items = $form_state['values']['container']['items'];
  $rows = array();
  $entity = $form_state['values']['entity'];
  // TO-DO 2.x: Remove dependency!
  $operation = views_bulk_operations_get_operation(
    $form_state['values']['operation'],
    $entity,
    array()
  );
  $rows = array();
  $current = 1;
  $total = 0;
  foreach ($items as $row_index => $entity_id) {
    if ($entity_id) {
      $total++;
    }
  }
  foreach ($items as $entity_id) {
    if ($entity_id) {
      $base = explode(':', $entity_id);
      $rows[] = array(
        'entity_id' => $base[1],
        'views_row' => array(),
        'position' => array(
          'current' => $current++,
          'total' => $total,
        ),
      );
    }
  }
  if ($form_state['values']['flush_submit']) {
    $_SESSION['ddo_forms:' . $form_state['values']['view_name'] . ':' . $form_state['values']['view_display']] = array();
  }
  drag_drop_operations_direct_process(
    $operation,
    $rows,
    array(
      'revision' => FALSE,
      'entity_load_capacity' => 10,
    )
  );
  drupal_goto($_GET['q']);

}

function drag_drop_operations_direct_process($operation, $rows, $options) {

  @set_time_limit(0);

  $entity_type = $operation->entityType;
  $entity_ids = array();
  foreach ($rows as $row_index => $row) {
    $entity_ids[] = $row['entity_id'];
  }
  $entities = entity_load($entity_type, $entity_ids);

  if (empty($entities)) {
    return;
  }

  // Pass the selected rows to the operation if needed.
  $operation_context = array();
  if ($operation->needsRows()) {
    $operation_context['rows'] = array();
    foreach ($rows as $row_index => $row) {
      $operation_context['rows'][$row_index] = $row['views_row'];
    }
  }
  $entities_noindex = array();
  foreach ($rows as $row_item) {
    if (isset($entities[$row_item['entity_id']])) {
      $entities_noindex[] = $entities[$row_item['entity_id']];
    }
  }
  $operation->execute($entities_noindex, $operation_context);

}

function drag_drop_operations_is_draggable($vars) {

  return $vars['view']->display_handler->get_option('ddo_draggable');

}

function drag_drop_operations_process_views_view_grid(&$vars) {

  if (drag_drop_operations_is_draggable($vars)) {
    $entity_id = $vars['view']->base_field;
    $entity_type = $vars['view']->base_table;
    $result_index = 0;
    foreach ($vars['column_classes'] as $keycol => $col) {
      foreach ($col as $rowindex => $row) {
        if (isset($vars['view']->result[$result_index])) {
          $id = $vars['view']->result[$result_index]->{$entity_id};
          $classes = 'ddo-draggable ';
          $classes .= 'ddo-draggable--' . $entity_type . '--' . $id;
          $vars['column_classes'][$keycol][$rowindex] .= ' ' . $classes;
          $result_index++;
        }
      }
    }
  }

}

function drag_drop_operations_process_views_view_unformatted(&$vars) {

  if (drag_drop_operations_is_draggable($vars)) {
    $entity_id = $vars['view']->base_field;
    $entity_type = $vars['view']->base_table;
    foreach ($vars['classes_array'] as $index => $row) {
      $id = $vars['view']->result[$index]->{$entity_id};
      $classes = 'ddo-draggable ';
      $classes .= 'ddo-draggable--' . $entity_type . '--' . $id;
      $vars['classes_array'][$index] .= ' ' . $classes;
    }
  }

}

function drag_drop_operations_process_views_view_table(&$vars) {

  if (drag_drop_operations_is_draggable($vars)) {
    $entity_id = $vars['view']->base_field;
    $entity_type = $vars['view']->base_table;
    foreach ($vars['row_classes'] as $index => $row) {
      $id = $vars['view']->result[$index]->{$entity_id};
      $vars['row_classes'][$index][] = 'ddo-draggable';
      $vars['row_classes'][$index][] = 'ddo-draggable--' . $entity_type . '--' . $id;
    }
  }

}

function drag_drop_operations_process_views_view_list(&$vars) {

  if (drag_drop_operations_is_draggable($vars)) {
    $entity_id = $vars['view']->base_field;
    $entity_type = $vars['view']->base_table;
    foreach ($vars['classes_array'] as $index => $row) {
      $id = $vars['view']->result[$index]->{$entity_id};
      $classes = 'ddo-draggable ';
      $classes .= 'ddo-draggable--' . $entity_type . '--' . $id;
      $vars['classes_array'][$index] .= ' ' . $classes;
    }
  }

}
